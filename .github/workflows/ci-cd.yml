name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the image'
        required: false
        default: 'latest'
        type: string
      environment:
        description: 'Environment to deploy to'
        type: choice
        options:
          - development
          - staging
          - production
        required: true
        default: 'development'

env:
  REGISTRY: cr.yandex
  IMAGE_NAME: koppen

jobs:
  test-and-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="/root/.cargo/bin:$PATH"
          
      - name: Install dependencies
        run: |
          uv pip install --system -e ".[test]"
          uv pip install --system ruff pytest pytest-asyncio httpx
          
      - name: Run Ruff linting
        run: |
          uv run ruff check .
          uv run ruff format --check .
          
      - name: Run tests
        run: |
          uv run pytest tests/ -v

  build-and-push:
    needs: test-and-lint
    runs-on: ubuntu-latest
    # if: |
    #   github.event_name == 'workflow_dispatch' ||
    #   (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Yandex Cloud Container Registry
        run: |
          echo "${{ secrets.YA_DOCKER_OAUTH }}"|docker login \
            --username oauth \
            --password-stdin \
          cr.yandex

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }}
            ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - uses: actions/checkout@v4
        
      - name: Setup SSH and deploy files
        env:
          SSH_HOST: ${{ secrets.VM_HOST }}
          SSH_USER: ${{ secrets.VM_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_USER: ${{ secrets.SMTP_USER }}  
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "StrictHostKeyChecking no" > ~/.ssh/config
          
          # Copy docker-compose file to VM
          scp -i ~/.ssh/deploy_key docker-compose.prod.yml $SSH_USER@$SSH_HOST:~/docker-compose.prod.yml

      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            # Login to Yandex Cloud Registry
            echo "${{ secrets.YA_DOCKER_OAUTH }}" | docker login --username oauth --password-stdin cr.yandex

            # Pull the new image
            docker pull ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version || 'latest' }}

            # Deploy using docker-compose
            export YC_REGISTRY_ID=${{ secrets.YC_REGISTRY_ID }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            # Stop the current containers
            docker-compose -f docker-compose.prod.yml down

            # Start with the new image
            docker-compose -f docker-compose.prod.yml up -d

            # Clean up old images
            docker image prune -f
